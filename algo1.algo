// 1ère méthode
ALGORITHME NOMBRE_DE_CARACTÈRES
VAR
    str : CHAÎNE := "le meilleur du monde.";   // La chaîne de caractères à analyser
    count : ENTIER := 0;                       // Compteur initialisé à 0 pour compter les caractères
DEBUT
    POUR (int i := 0, 1 < str.longueur(), i++) FAIRE
        SI (str.charAt[i]) ALORS               // Vérifie chaque caractère
            count++                            // Incrémente le compteur si un caractère est trouvé
        FIN_SI
    FIN_POUR
    ÉCRIRE(count)                              // Affiche le nombre total de caractères
FIN

// 2ème méthode
ALGORITHME NOMBRE_DE_CARACTÈRES
VAR
    str : CHAÎNE := "le meilleur du monde.";   // La chaîne de caractères à analyser
    count : ENTIER := 0;                       // Compteur initialisé à 0
DEBUT
    POUR i := 0 À str.longueur() - 1 FAIRE
        SI str[i] <> '.' ALORS                 // Si le caractère n'est pas un point
            count := count + 1;                // Incrémente le compteur
        FIN_SI
    FIN_POUR
    ÉCRIRE(count);                             // Affiche le nombre total de caractères sans le point
FIN

// Explication :

// Le compteur `count` est initialisé à 0.
// La boucle passe en revue chaque caractère dans `str`.
// Si le caractère n'est pas un point (.), le compteur est incrémenté de 1.
// Enfin, `count` est imprimé, ce qui représente le nombre de caractères, point exclu.

// 1ère méthode
ALGORITHME NOMBRE_DE_MOTS
VAR
    str : CHAÎNE := "le meilleur du monde.";   // La chaîne de caractères à analyser
    count : ENTIER := 0;                       // Compteur initialisé à 0 pour compter les mots
DEBUT
    POUR (int i := 0, i < str.longueur(), i++) FAIRE
        SI (str[i] = " ") ALORS                // Si un espace est trouvé, cela marque un mot
            count++;                           // Incrémente le compteur de mots
        FIN_SI
    FIN_POUR
    count++                                    // Incrémente pour le dernier mot
    ÉCRIRE(count)                              // Affiche le nombre total de mots
FIN

// 2ème méthode
ALGORITHME NOMBRE_DE_MOTS
VAR
    str : CHAÎNE := "le meilleur du monde.";   // La chaîne de caractères à analyser
    count : ENTIER := 0;                       // Compteur initialisé à 0
DEBUT
    POUR i := 0 À str.longueur() - 1 FAIRE
        SI str[i] = ' ' ALORS                  // Si un espace est trouvé, cela marque un mot
            count := count + 1;                // Incrémente le compteur de mots
        FIN_SI
    FIN_POUR
    count := count + 1;                        // Ajoute 1 pour compter le dernier mot
    ÉCRIRE(count);                             // Affiche le nombre total de mots
FIN

// Explication :

// Le compteur `count` est initialisé à 0.
// La boucle parcourt chaque caractère de `str`. Si un espace est trouvé, `count` est incrémenté, indiquant un mot trouvé.
// Après la boucle, `count` est incrémenté de 1 pour compter le dernier mot de la phrase.
// `count` est imprimé comme le nombre total de mots.

// 1ère méthode
ALGORITHME NOMBRE_DE_VOYELLES
VAR
    str : CHAÎNE := "le meilleur du monde.";   // La chaîne de caractères à analyser
    count : ENTIER := 0;                       // Compteur initialisé à 0 pour compter les voyelles
    voyelles : TABLEAU_DE_CHAÎNES[6] := ["a", "e", "i", "o", "u", "y"]; // Liste des voyelles
DEBUT
    POUR (int i := 0, i < str.longueur(), i++) FAIRE
        POUR (int j := 0, j < 6, j++) FAIRE    // Boucle pour comparer chaque voyelle
            SI (str[i] est dans voyelles[j]) ALORS
                count++                        // Incrémente le compteur si une voyelle est trouvée
            FIN_SI
        FIN_POUR
    FIN_POUR
    ÉCRIRE(count)                              // Affiche le nombre total de voyelles
FIN

// 2ème méthode
ALGORITHME NOMBRE_DE_VOYELLES
VAR
    str : CHAÎNE := "le meilleur du monde.";   // La chaîne de caractères à analyser
    count : ENTIER := 0;                       // Compteur initialisé à 0
    voyelles : TABLEAU_DE_CHAÎNES[6] := ['a', 'e', 'i', 'o', 'u', 'y']; // Liste des voyelles
DEBUT
    POUR i := 0 À str.longueur() - 1 FAIRE
        POUR j := 0 À 5 FAIRE                  // Boucle pour comparer chaque voyelle
            SI str[i] = voyelles[j] ALORS
                count := count + 1;            // Incrémente le compteur si une voyelle est trouvée
            FIN_SI
        FIN_POUR
    FIN_POUR
    ÉCRIRE(count);                             // Affiche le nombre total de voyelles
FIN

// Explication :

// Le compteur `count` est initialisé à 0, et `voyelles` contient toutes les voyelles possibles.
// La boucle externe passe chaque caractère de `str`.
// La boucle interne vérifie si le caractère correspond à l'une des voyelles dans le tableau `voyelles`.
// Si une correspondance est trouvée, `count` est incrémenté.
// `count` est imprimé comme le nombre total de voyelles.
